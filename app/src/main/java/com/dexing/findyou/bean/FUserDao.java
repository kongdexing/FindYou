package com.dexing.findyou.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FUSER".
*/
public class FUserDao extends AbstractDao<FUser, Void> {

    public static final String TABLENAME = "FUSER";

    /**
     * Properties of entity FUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LoginName = new Property(0, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property Password = new Property(1, String.class, "password", false, "PASSWORD");
        public final static Property PhoneNum = new Property(2, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property HeadImg = new Property(4, String.class, "headImg", false, "HEAD_IMG");
        public final static Property NickName = new Property(5, String.class, "nickName", false, "NICK_NAME");
        public final static Property Sex = new Property(6, int.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(7, String.class, "birthday", false, "BIRTHDAY");
        public final static Property GpsPush = new Property(8, boolean.class, "gpsPush", false, "GPS_PUSH");
    };


    public FUserDao(DaoConfig config) {
        super(config);
    }
    
    public FUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FUSER\" (" + //
                "\"LOGIN_NAME\" TEXT," + // 0: loginName
                "\"PASSWORD\" TEXT," + // 1: password
                "\"PHONE_NUM\" TEXT," + // 2: phoneNum
                "\"EMAIL\" TEXT," + // 3: email
                "\"HEAD_IMG\" TEXT," + // 4: headImg
                "\"NICK_NAME\" TEXT," + // 5: nickName
                "\"SEX\" INTEGER NOT NULL ," + // 6: sex
                "\"BIRTHDAY\" TEXT," + // 7: birthday
                "\"GPS_PUSH\" INTEGER NOT NULL );"); // 8: gpsPush
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FUSER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FUser entity) {
        stmt.clearBindings();
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(1, loginName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(3, phoneNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
        stmt.bindLong(7, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
        stmt.bindLong(9, entity.getGpsPush() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FUser entity) {
        stmt.clearBindings();
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(1, loginName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(3, phoneNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
        stmt.bindLong(7, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
        stmt.bindLong(9, entity.getGpsPush() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FUser readEntity(Cursor cursor, int offset) {
        FUser entity = new FUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // loginName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // password
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phoneNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickName
            cursor.getInt(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthday
            cursor.getShort(offset + 8) != 0 // gpsPush
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FUser entity, int offset) {
        entity.setLoginName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoneNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.getInt(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGpsPush(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FUser entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
