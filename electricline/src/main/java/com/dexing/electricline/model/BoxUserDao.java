package com.dexing.electricline.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOX_USER".
*/
public class BoxUserDao extends AbstractDao<BoxUser, Void> {

    public static final String TABLENAME = "BOX_USER";

    /**
     * Properties of entity BoxUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property EPointId = new Property(0, String.class, "EPointId", false, "EPOINT_ID");
        public final static Property VillageId = new Property(1, String.class, "VillageId", false, "VILLAGE_ID");
        public final static Property UserNum = new Property(2, String.class, "userNum", false, "USER_NUM");
        public final static Property PropertyNum = new Property(3, String.class, "propertyNum", false, "PROPERTY_NUM");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property UserPhone = new Property(5, String.class, "userPhone", false, "USER_PHONE");
        public final static Property Mark = new Property(6, String.class, "mark", false, "MARK");
    };


    public BoxUserDao(DaoConfig config) {
        super(config);
    }
    
    public BoxUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOX_USER\" (" + //
                "\"EPOINT_ID\" TEXT," + // 0: EPointId
                "\"VILLAGE_ID\" TEXT," + // 1: VillageId
                "\"USER_NUM\" TEXT," + // 2: userNum
                "\"PROPERTY_NUM\" TEXT," + // 3: propertyNum
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"USER_PHONE\" TEXT," + // 5: userPhone
                "\"MARK\" TEXT);"); // 6: mark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOX_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BoxUser entity) {
        stmt.clearBindings();
 
        String EPointId = entity.getEPointId();
        if (EPointId != null) {
            stmt.bindString(1, EPointId);
        }
 
        String VillageId = entity.getVillageId();
        if (VillageId != null) {
            stmt.bindString(2, VillageId);
        }
 
        String userNum = entity.getUserNum();
        if (userNum != null) {
            stmt.bindString(3, userNum);
        }
 
        String propertyNum = entity.getPropertyNum();
        if (propertyNum != null) {
            stmt.bindString(4, propertyNum);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(6, userPhone);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(7, mark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BoxUser entity) {
        stmt.clearBindings();
 
        String EPointId = entity.getEPointId();
        if (EPointId != null) {
            stmt.bindString(1, EPointId);
        }
 
        String VillageId = entity.getVillageId();
        if (VillageId != null) {
            stmt.bindString(2, VillageId);
        }
 
        String userNum = entity.getUserNum();
        if (userNum != null) {
            stmt.bindString(3, userNum);
        }
 
        String propertyNum = entity.getPropertyNum();
        if (propertyNum != null) {
            stmt.bindString(4, propertyNum);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(6, userPhone);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(7, mark);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BoxUser readEntity(Cursor cursor, int offset) {
        BoxUser entity = new BoxUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // EPointId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // VillageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // propertyNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // mark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BoxUser entity, int offset) {
        entity.setEPointId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVillageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPropertyNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BoxUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BoxUser entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
